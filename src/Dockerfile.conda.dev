# FROM continuumio/miniconda3
FROM mambaorg/micromamba:1.4.2-jammy

ARG ROOT_PASS
ARG USERNAME
ARG GROUP
ARG ENVIRONMENT_NAME 
ARG SCRIPTS_PATH
ARG ENVIRONMENT_CONFIG
ARG DEVCONTAINER_SUBFOLDER
ARG ADDITIONAL_APT_PACKAGES

ARG HOME="/home/$USERNAME"
ARG NVIM_VERSION=v0.8.3
ARG MAMBA_ROOT_PREFIX=/opt/conda
ARG ELAM_ABSPATH="$HOME/elam"

ARG VENV_NAME=main
ARG VENV_PATH="${HOME}/venv/${VENV_NAME}"

USER root

RUN usermod -l $USERNAME mambauser
RUN usermod -d $HOME -m $USERNAME 
RUN groupmod -n $GROUP mambauser
RUN ls -al "/home"
RUN echo "home: $HOME"
ENV HOME="/home/$USERNAME"
RUN echo "home 2: $HOME"
RUN rm -rf "/home/mambauser"

SHELL ["/bin/bash", "-c"]
RUN apt-get update && \
  apt-get upgrade -y && \
  apt-get install -y --no-install-recommends \
  wget \
  jq \ 
  git \
  ${ADDITIONAL_APT_PACKAGES//[$'\t\r\n']}
RUN apt-get clean

# Neovim requires manual retrieval of the latest version
# as the apt package is quite old
RUN wget https://github.com/neovim/neovim/releases/download/$NVIM_VERSION/nvim-linux64.deb \
  -O /neovim.deb \
  --no-check-certificate
RUN apt install -y /neovim.deb 
RUN rm /neovim.deb
ENV EDITOR=nvim

# yq
RUN wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
  -O /usr/bin/yq \
  --no-check-certificate && \
  chmod +x /usr/bin/yq

RUN echo "root:$ROOT_PASS" | chpasswd

# Conda is deliberately installed as user: $USERNAME
COPY "src/environment.common.yml" /environment.common.yml
COPY $ENVIRONMENT_CONFIG /environment.repo.yml
RUN yq eval-all \
  '. as $item ireduce ({}; . *+ $item)' \
  "/environment.common.yml" \
  "/environment.repo.yml" \
  > "/environment.merged.yml"

RUN echo "common:\n" && cat "/environment.common.yml"
RUN echo "repo:\n" && cat "/environment.repo.yml"
RUN echo "merged:\n" && cat "/environment.merged.yml"

# RUN conda env create --file "/environment.merged.yml"
RUN micromamba env create --file "/environment.merged.yml" 

# RUN mamba install -n "$ENVIRONMENT_NAME" conda-libmamba-solver
# RUN conda config --set solver libmamba

# RUN useradd -m "$USERNAME"
RUN mkdir -p "$HOME/.vscode-server/extensions"
RUN mkdir -p "$HOME/.vscode-server-insiders/extensions"

RUN chown -R "$USERNAME:$GROUP" /environment.*.yml
RUN chown -R "$USERNAME:$GROUP" "$HOME"
RUN chown -R "$USERNAME:$GROUP" "/opt/conda/envs"

USER $USERNAME

# Gists
ADD --chown=$USERNAME:$GROUP \
  https://gist.githubusercontent.com/utkusarioglu/2d4be44dc7707afccd540ad99ba385e6/raw/create-env-example.sh \
  /scripts/create-env-example.sh

ADD --chown=$USERNAME:$GROUP \
  https://gist.githubusercontent.com/utkusarioglu/3523b00578807d63b05399fe57a4b2a7/raw/.bashrc \
  $HOME/.bashrc

ADD --chown=$USERNAME:$GROUP \
  https://gist.githubusercontent.com/utkusarioglu/d5c216c744460c45bf6260d0de4131b4/raw/.inputrc \
  $HOME/.inputrc
RUN chmod +x \
  /scripts/create-env-example.sh \
  $HOME/.bashrc \
  $HOME/.inputrc

# Elam
RUN git clone https://github.com/utkusarioglu/elam.git $ELAM_ABSPATH
RUN echo "alias elam=$ELAM_ABSPATH/elam.sh" >> $HOME/.bash_aliases

ENV PATH "$MAMBA_ROOT_PREFIX/envs/$ENVIRONMENT_NAME/bin:$PATH"
ENV SHELL /bin/bash

RUN python -m venv ${VENV_PATH}
RUN echo "source ${VENV_PATH}/bin/activate" >> ~/.bashrc
COPY "src/$DEVCONTAINER_SUBFOLDER/requirements.txt" "/requirements.txt"
RUN source ${VENV_PATH}/bin/activate && \
  pip install --require-virtualenv -r "/requirements.txt"

COPY "${SCRIPTS_PATH}" /scripts

# Pushing into `.bashrc` for environment selection
RUN echo "eval \"\$(micromamba shell hook --shell=bash)\" && micromamba activate $ENVIRONMENT_NAME" >> ~/.bashrc
